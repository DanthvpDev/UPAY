USE MASTER 
GO

--DROP DATABASE PLANILLAS_DANIELH
--GO

CREATE DATABASE PLANILLAS_DANIELH
GO


USE PLANILLAS_DANIELH
GO

CREATE TABLE EMPLEADOS (
	ID VARCHAR(9) PRIMARY KEY,
	NOMBRE VARCHAR(25) NOT NULL,
	APELLIDO_1 VARCHAR(30) NOT NULL,
	APELLIDO_2 VARCHAR(30),
	CORREO VARCHAR(80) NOT NULL,
	TELEFONO VARCHAR(8) NOT NULL,
	FECHA_NACIMIENTO DATE NOT NULL,
	BORRADO BIT NOT NULL
)

ALTER TABLE EMPLEADOS  ADD 
CONSTRAINT DF_BORRADO_EMPLEADO DEFAULT 0 FOR BORRADO,
CONSTRAINT UQ_CORREO UNIQUE (CORREO),
CONSTRAINT CHK_FECHA_NACIMIENTO CHECK(FECHA_NACIMIENTO <= DATEADD(YEAR, -18, GETDATE())),
CONSTRAINT UQ_TELEFONO UNIQUE(TELEFONO)


CREATE TABLE GRADOS_ACADEMICOS (
	ID INT IDENTITY(1,1) PRIMARY KEY,
	GRADO VARCHAR(22) NOT NULL,
	PUNTOS INT NOT NULL,
	CATEGORIA INT NOT NULL,
	APLICA_PUNTOS BIT NOT NULL
)

/*
CERT HACE REFERENCIA A CERTIFICADOS TÉCNICOS QUE RECIBEN 1 PUNTO
CURS HACE REFERENCIA A CURSOS LIBRES QUE NO RECIBE PUNTOS
*/
ALTER TABLE GRADOS_ACADEMICOS ADD 
CONSTRAINT CHK_GRADO_TITULO CHECK (GRADO IN ('CERT', 'DIPL', 'BACH', 'LICI', 'MAES', 'DOCT', 'CURS')),
CONSTRAINT CHK_CATEGORIA_TITULO CHECK (CATEGORIA > 0 AND CATEGORIA < 3),
CONSTRAINT CHK_PUNTOS_TITULO CHECK (PUNTOS >= 0 AND PUNTOS < 5)



CREATE TABLE CARRERA_PROFESIONAL (
	ID INT IDENTITY(1,1) PRIMARY KEY,
	NOMBRE_CERT VARCHAR(80) NOT NULL,
	NOMBRE_INSTITUCION VARCHAR(80) NOT NULL,
	ANIO INT NOT NULL,
	BORRADO BIT NOT NULL,
	EMPLEADO_ID VARCHAR(9) NOT NULL,
	GRADO_ID INT NOT NULL

)

ALTER TABLE CARRERA_PROFESIONAL ADD
CONSTRAINT DF_BORRADO_TITULO DEFAULT 0 FOR BORRADO,
CONSTRAINT CHK_ANIO_TITULO CHECK (ANIO > 1955 AND ANIO <= YEAR(GETDATE())),
CONSTRAINT FK_EMPLEADO_CARRERAPROF  FOREIGN KEY (EMPLEADO_ID) REFERENCES EMPLEADOS(ID),
CONSTRAINT FK_GRADOACAD_CARRERAPROF  FOREIGN KEY (GRADO_ID) REFERENCES GRADOS_ACADEMICOS(ID)




CREATE TABLE PENSIONES (
	ID INT IDENTITY(1,1) PRIMARY KEY,
	MONTO DECIMAL(12,2) NOT NULL,
	FECHA_INICIO DATE NOT NULL,
	FECHA_FIN DATE NULL,
	ESTADO VARCHAR(3) NOT NULL,
	EMPLEADO_ID VARCHAR(9) NOT NULL
)

ALTER TABLE PENSIONES ADD
CONSTRAINT CHK_MONTO_PENSION CHECK (MONTO > 0),
CONSTRAINT CHK_FECHA_INICIO_PENSION CHECK(FECHA_INICIO <= GETDATE()),
CONSTRAINT CHK_FECHA_FIN_PENSION CHECK(FECHA_FIN >= GETDATE()),
CONSTRAINT CHK_ESTADO_PENSION CHECK (ESTADO IN ('ACT', 'INA')),
CONSTRAINT DF_ESTADO_PENSION DEFAULT 'ACT' FOR ESTADO,
CONSTRAINT FK_EMPLEADO_PENSION FOREIGN KEY (EMPLEADO_ID) REFERENCES EMPLEADOS(ID)



/* 
	EL CAMPO ESTADO EN LOS PERMISOS SE UTILIZA PARA SABER 
	SI UN PERMISO FUE APROBADO, 
	ESTÁ PENDIENTE DE APROBACIÓN 
	O NO FUE APROBADO
*/
CREATE TABLE PERMISOS (
	ID INT IDENTITY(1,1) PRIMARY KEY,
	DESCRIPCION VARCHAR(125) NOT NULL,
	GOCE_SALARIO BIT NOT NULL,
	FECHA_INICIO DATE NOT NULL,
	FECHA_FIN DATE NOT NULL,
	ESTADO VARCHAR(3) NOT NULL,
	EMPLEADO_ID VARCHAR(9) NOT NULL
)

ALTER TABLE PERMISOS ADD
CONSTRAINT CHK_FECHA_INICIO_PERMISO CHECK(FECHA_INICIO <= GETDATE()),
CONSTRAINT CHK_FECHA_FIN_PERMISO CHECK(FECHA_FIN <= GETDATE()),
CONSTRAINT CHK_ESTADO_PERMISO CHECK (ESTADO IN ('APR', 'PEN', 'ELM')),
CONSTRAINT DF_ESTADO_PERMISO DEFAULT 'PEN' FOR ESTADO,
CONSTRAINT FK_EMPLEADO_PERMISOS FOREIGN KEY (EMPLEADO_ID) REFERENCES EMPLEADOS(ID)


/*
	EL CAMPO ESTADO SE UTILIZA PARA 
*/
CREATE TABLE INCAPACIDADES(
	ID INT IDENTITY(1,1) PRIMARY KEY,
	TIPO VARCHAR(3) NOT NULL,
	FECHA_INICIO DATE NOT NULL,
	FECHA_FIN DATE NOT NULL,
	EMPLEADO_ID VARCHAR(9) NOT NULL
)

ALTER TABLE INCAPACIDADES ADD
CONSTRAINT CHK_ESTADO_INCAPACIDAD CHECK (TIPO IN ('EMB', 'ENF', 'ACC')),
CONSTRAINT CHK_FECHA_INICIO_INCAPACIDAD CHECK(FECHA_INICIO <= GETDATE()),
CONSTRAINT CHK_FECHA_FIN_INCAPACIDAD CHECK(FECHA_FIN > GETDATE()),
CONSTRAINT FK_EMPLEADO_INCAPACIDAD FOREIGN KEY (EMPLEADO_ID) REFERENCES EMPLEADOS(ID)


CREATE TABLE PUESTOS(
	ID INT IDENTITY(1,1) PRIMARY KEY,
	NOMBRE VARCHAR(45) NOT NULL,
	SALARIO_BASE DECIMAL(12,2) NOT NULL,
	SALARIO_GLOBAL DECIMAL(12,2) NOT NULL,
	CATEGORIA INT NOT NULL,
	ESTADO VARCHAR(3) NOT NULL
)

ALTER TABLE PUESTOS ADD
CONSTRAINT CHK_CATEGORIA_PUESTO CHECK (CATEGORIA > 0 AND CATEGORIA < 3),
CONSTRAINT CHK_ESTADO_PUESTO CHECK (ESTADO IN ('ACT', 'INA', 'ELM')),
CONSTRAINT DF_ESTADO_PUESTO DEFAULT 'ACT' FOR ESTADO,
CONSTRAINT CHK_SALARIO_BASE CHECK (SALARIO_BASE > 0),
CONSTRAINT CHK_SALARIO_GLOBAL CHECK (SALARIO_GLOBAL > 0)


CREATE TABLE NOMBRAMIENTOS (
	ID INT IDENTITY(1,1) PRIMARY KEY,
	FECHAI_NOMBRAMIENTO DATE NOT NULL,
	FECHAF_NOMBRAMIENTO DATE NULL,
	ESTADO VARCHAR(3) NOT NULL,
	ES_SALARIOGLOBAL BIT NOT NULL,
	EMPLEADO_ID VARCHAR(9) NOT NULL,
	PUESTO_ID INT NOT NULL
)

ALTER TABLE NOMBRAMIENTOS ADD
CONSTRAINT CHK_ESTADO_NOMBRAMIENTO CHECK (ESTADO IN ('ACT', 'INA')),
CONSTRAINT DF_ESTADO_NOMBRAMIENTO DEFAULT 'ACT' FOR ESTADO,
CONSTRAINT DF_FECHAINICIO_NOMBRAMIENTO DEFAULT GETDATE() FOR FECHAI_NOMBRAMIENTO,
CONSTRAINT CHK_FECHAINICIO_NOMBRAMIENTO CHECK (FECHAI_NOMBRAMIENTO >= GETDATE()),
CONSTRAINT CHK_FECHAFIN_NOMBRAMIENTO CHECK (FECHAF_NOMBRAMIENTO > FECHAI_NOMBRAMIENTO),
CONSTRAINT FK_EMPLEADO_NOMBRAMIENTO FOREIGN KEY (EMPLEADO_ID) REFERENCES EMPLEADOS(ID),
CONSTRAINT FK_PUESTO_NOMBRAMIENTO FOREIGN KEY (PUESTO_ID) REFERENCES PUESTOS(ID)


/*
	LAS OPCIONES DE TIPO PLANILLA SON:
	REG: REGULAR,
	EXT: EXTRAORDINARIA,
	SE: SALARIO ESCOLAR,
	AGU: AGUINALDO
*/

CREATE TABLE PLANILLAS (
	ID INT IDENTITY(1,1) PRIMARY KEY,
	FECHA_CALCULO DATE NOT NULL,
	ES_EXTRAORDINARIA BIT NOT NULL,
	TIPO_PLANILLA VARCHAR(3) NOT NULL
)

ALTER TABLE PLANILLAS ADD
CONSTRAINT DF_FECHA_CALCULO_PLANILLA DEFAULT GETDATE() FOR FECHA_CALCULO,
CONSTRAINT DF_ES_EXTRAORDINARIA_PLANILLA DEFAULT 0 FOR ES_EXTRAORDINARIA,
CONSTRAINT CHK_TIPO_PLANILLA CHECK(TIPO_PLANILLA IN ('REG', 'EXT', 'SE', 'AGU')),
CONSTRAINT DF_TIPO_PLANILLA DEFAULT 'REG' FOR TIPO_PLANILLA


CREATE TABLE DETALLES_PLANILLA (
	ID INT IDENTITY(1,1) PRIMARY KEY,
	PRIMER_PAGO DECIMAL(12,2) NOT NULL,
	SEGUNDO_PAGO DECIMAL(12,2) NOT NULL,
	SALARIO_NETO DECIMAL(12,2) NOT NULL,
	SALARIO_BRUTO DECIMAL(12,2) NOT NULL,
	DIAS_TRABAJADOS INT NOT NULL,
	PENSIONES_TOTAL DECIMAL(12,2) NULL,
	RENTA_TOTAL DECIMAL(12,2) NULL,
	SUBSIDIO_PATRSON DECIMAL(12,2) NULL,
	FECHA_PAGO1 DATE NOT NULL,
	FECHA_PAGO2 DATE NOT NULL,
	PLANILLA_ID INT NOT NULL,
	EMPLEADO_ID VARCHAR(9) NOT NULL
)

ALTER TABLE DETALLES_PLANILLA ADD
CONSTRAINT CHK_PRIMER_PAGO CHECK (PRIMER_PAGO > 0),
CONSTRAINT CHK_SEGUNDO_PAGO CHECK (SEGUNDO_PAGO >= 0),
CONSTRAINT CHK_SALARIO_NETO CHECK (SALARIO_NETO >= 0 AND SALARIO_NETO < SALARIO_BRUTO),
CONSTRAINT CHK_SALARIO_BRUTO CHECK (sALARIO_BRUTO >= 0 AND SALARIO_BRUTO > SALARIO_NETO),
CONSTRAINT CHK_DIAS_TRABAJADOS CHECK (DIAS_TRABAJADOS >= 0 AND DIAS_TRABAJADOS <= 20),
CONSTRAINT DF_DIAS_TRABAJADOS DEFAULT 20 FOR DIAS_TRABAJADOS,
CONSTRAINT FK_EMPLEADO_DETALLE_PLANILLA FOREIGN KEY (EMPLEADO_ID) REFERENCES EMPLEADOS(ID),
CONSTRAINT FK_PLANILLA_DETALLE FOREIGN KEY (PLANILLA_ID) REFERENCES PLANILLAS(ID)


CREATE TABLE AJUSTES_SALARIALES (
	ID INT IDENTITY(1,1) PRIMARY KEY,
	DESCRIPRCION VARCHAR(50) NOT NULL,
	FECHA_INICIO DATE NOT NULL,
	FECHA_FIN DATE NULL,
	ES_DEDUCCION BIT NOT NULL,
	ES_VALOR BIT NOT NULL,
	USA_ANIOS BIT NULL,
	VALOR DECIMAL(12,2),
	CATEGORIA INT NULL,
	ESTADO VARCHAR(3) NOT NULL
)

ALTER TABLE AJUSTES_SALARIALES ADD 
CONSTRAINT CHK_VALOR CHECK(VALOR >= 0),
CONSTRAINT CHK_CATEGORIA CHECK(CATEGORIA > 0 AND CATEGORIA < 3),
CONSTRAINT CHK_ESTADO CHECK(ESTADO IN ('ACT', 'INA')),
CONSTRAINT DF_ESTADO DEFAULT 'ACT' FOR ESTADO



CREATE TABLE DESGLOSE_AJUSTES (
	ID INT IDENTITY(1,1) PRIMARY KEY,
	MONTO DECIMAL(12,2) NOT NULL,
	OBSERVACIONES VARCHAR(125) NULL,
	DETALLE_ID INT NOT NULL,
	AJUSTE_ID INT NOT NULL
)

ALTER TABLE DESGLOSE_AJUSTES ADD
CONSTRAINT CHK_MONTO CHECK(MONTO >= 0),
CONSTRAINT FK_DETALLES_DESGLOSE FOREIGN KEY (DETALLE_ID) REFERENCES DETALLES_PLANILLA(ID),
CONSTRAINT FK_AJUSTES_DESGLOSE FOREIGN KEY (AJUSTE_ID) REFERENCES AJUSTES_SALARIALES(ID)




CREATE TABLE TOPES_RENTA (
	ID INT IDENTITY(1,1) PRIMARY KEY,
	MONTO_BASE DECIMAL(12,2) NOT NULL,
	MONTO_TOPE DECIMAL(12,2) NULL,
	ANIO INT NOT NULL,
	PORCENTAJE DECIMAL(4,1) NOT NULL,
	ESTADO VARCHAR(3) NOT NULL
)

ALTER TABLE TOPES_RENTA ADD
CONSTRAINT CHK_MONTO_BASE CHECK(MONTO_BASE >= 0),
CONSTRAINT CHK_MONTO_TOPE CHECK(MONTO_TOPE >= 0 AND MONTO_TOPE > MONTO_BASE),
CONSTRAINT CHK_PORCENTAJE_RENTA CHECK(PORCENTAJE >= 0),
CONSTRAINT CHK_ANIO CHECK(ANIO > 1947),
CONSTRAINT CHK_ESTADO_RENTA CHECK (ESTADO IN('ACT', 'INA'))

